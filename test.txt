//
// Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
//
//
//   fxc /Od /T ps_4_0 test.hlsl /Fo test.bin /Fc test.txt
//
//
// Buffer Definitions: 
//
// cbuffer cbuf0
// {
//
//   float4 cool;                       // Offset:    0 Size:    16
//   int4 zeek;                         // Offset:   16 Size:    16
//   int2 arr[127];                     // Offset:   32 Size:  2024
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// samp0                             sampler      NA          NA    0        1
// tex0                              texture  float4          2d    0        1
// tex1                              texture  float4        cube    1        1
// tex2                              texture  float4          3d    2        1
// tex3                              texture  float4       2dMS2    3        1
// cbuf0                             cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// TEXCOORD                 0   xyzw        0     NONE  float   xyzw
// TEXCOORD                 1   xyzw        1     NONE  float   x   
// SV_POSITION              0   xyzw        2      POS  float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue Format   Used
// -------------------- ----- ------ -------- -------- ------ ------
// SV_TARGET                0   xyzw        0   TARGET  float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[129], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texturecube (float,float,float,float) t1
dcl_resource_texture3d (float,float,float,float) t2
dcl_resource_texture2dms(2) (float,float,float,float) t3
dcl_input_ps linear v0.xyzw
dcl_input_ps linear centroid v1.x
dcl_input_ps_siv linear noperspective v2.x, position
dcl_output o0.xyzw
dcl_temps 3
ftou r0.x, v2.x
utof r0.x, r0.x
dp4 r0.y, v0.xyzw, l(0.000000, 1.000000, 2.000000, 3.000000)
add r0.x, r0.y, r0.x
add r0.x, r0.x, v1.x
xor r0.y, cb0[1].y, l(2)
itof r0.y, r0.y
add r0.x, r0.y, r0.x
mov r0.y, l(0)
mov r0.z, r0.x
mov r0.w, r0.y
loop 
  ilt r1.x, r0.w, l(10)
  breakc_z r1.x
  itof r1.x, r0.w
  add r1.y, r1.x, l(1.001000)
  div r1.y, l(1.000000), r1.y
  mul r1.x, r1.y, r1.x
  sqrt r1.y, r0.z
  add r1.x, r1.y, r1.x
  add r1.x, r0.z, r1.x
  lt r1.y, r1.x, l(0.000000)
  if_nz r1.y
    mov r0.z, r1.x
    break 
  endif 
  iadd r0.w, r0.w, l(1)
  mov r0.z, r1.x
endloop 
ftoi r0.x, r0.z
ilt r0.y, r0.x, l(0)
if_nz r0.y
  xor r0.y, r0.x, l(50)
else 
  ilt r1.x, l(5), r0.x
  if_nz r1.x
    and r0.y, r0.x, l(2222)
  else 
    iadd r0.y, r0.x, -cb0[r0.x + 2].x
  endif 
endif 
add r0.x, cb0[0].y, cb0[0].x
add r0.x, r0.x, cb0[0].z
add r0.x, r0.x, cb0[0].w
add r0.x, r0.x, r0.z
sample r1.xyzw, l(0.125000, 5.000000, 0.000000, 0.000000), t0.xyzw, s0
add r0.x, r0.x, r1.x
sample r1.xyzw, l(0.125000, 5.000000, 1.000000, 0.000000), t1.xyzw, s0
add r0.x, r0.x, r1.x
sample r1.xyzw, l(0.125000, 5.000000, 1.000000, 0.000000), t2.xyzw, s0
add r0.x, r0.x, r1.z
ldms(1,1,0) r1.xyzw, l(0, 5, 0, 0), t3.xyzw, l(0)
add r1.x, r0.x, r1.x
div r1.y, l(1.000000), r1.x
sample_b r2.xyzw, r1.xyxx, t0.xyzw, s0, l(-15.000000)
add r0.x, r1.x, r2.y
and r0.y, r0.y, l(0x00087e85)
iadd r0.y, r0.y, l(42)
ishr r0.y, r0.y, l(76)
ishl r0.y, r0.y, l(22)
mov r0.y, r0.y
xor r0.z, r0.y, r0.y
ushr r0.z, r0.z, l(3)
ishl r0.z, r0.z, l(2)
mov r1.x, cb0[r0.z + 2].x
xor r0.z, r0.z, r1.x
and r1.x, r0.z, l(127)
mov r1.x, cb0[r1.x + 2].x
and r0.z, r0.z, r1.x
iadd r1.x, r0.z, l(66)
iadd r1.y, r0.z, l(1)
imul null, r1.x, cb0[r1.x + 2].y, cb0[r1.y + 2].x
itof r1.x, r1.x
add r0.x, r0.x, r1.x
mul o0.z, r0.x, l(0.200000)
utof r0.x, r0.z
add o0.w, r0.x, l(0.500000)
itof o0.x, r0.w
itof o0.y, r0.y
ret 
// Approximately 80 instruction slots used
